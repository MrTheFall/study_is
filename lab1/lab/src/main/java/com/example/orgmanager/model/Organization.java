package com.example.orgmanager.model;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.ForeignKey;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.SourceType;

import java.util.Date;

@Entity
@Table(name = "organization")
@Getter
@Setter
public class Organization {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(updatable = false, nullable = false)
    private Integer id; // generated by DB

    @NotNull
    @NotBlank
    @Column(nullable = false)
    private String name;

    @NotNull
    @Valid
    @ManyToOne(
            optional = false,
            cascade = {CascadeType.PERSIST, CascadeType.MERGE}
    )
    @JoinColumn(
            name = "coordinates_id",
            nullable = false,
            foreignKey = @ForeignKey(name = "fk_org_coordinates")
    )
    private Coordinates coordinates;

    @Temporal(TemporalType.TIMESTAMP)
    @CreationTimestamp(source = SourceType.DB)
    @Setter(AccessLevel.NONE)
    @Column(
            name = "creation_date",
            nullable = false,
            updatable = false,
            insertable = false,
            columnDefinition = "timestamp default current_timestamp"
    )
    private Date creationDate;

    @NotNull
    @Valid
    @ManyToOne(
            optional = false,
            cascade = {CascadeType.PERSIST, CascadeType.MERGE}
    )
    @JoinColumn(
            name = "official_address_id",
            nullable = false,
            foreignKey = @ForeignKey(name = "fk_org_official_address")
    )
    private Address officialAddress;

    @Positive
    @Column(name = "annual_turnover", nullable = false)
    private float annualTurnover;

    @NotNull
    @Positive
    @Column(name = "employees_count", nullable = false)
    private Long employeesCount;

    @Positive
    @Column(nullable = false)
    private double rating;

    @NotNull
    @NotBlank
    @Column(name = "full_name", nullable = false)
    private String fullName;

    @Enumerated(EnumType.STRING)
    private OrganizationType type; // can be null

    @NotNull
    @Valid
    @ManyToOne(
            optional = false,
            cascade = {CascadeType.PERSIST, CascadeType.MERGE}
    )
    @JoinColumn(
            name = "postal_address_id",
            nullable = false,
            foreignKey = @ForeignKey(name = "fk_org_postal_address")
    )
    private Address postalAddress;

}
